/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjetJava;

import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Frame contenant tous les Panels.
 *
 * @author deux
 */
public class MainGUI extends javax.swing.JFrame {

    private Identification id;
    private Membre m;

    /**
     * Creates new form ConnexionGUI
     */
    public MainGUI() {
        initComponents();
        this.setExtendedState(this.MAXIMIZED_BOTH);
        this.interfaceConnexion();
        /*
        Tentative de lire dans le ficher de sauvegarde, sinon cree une liste 
        d'utilisateurs vierge.
         */
        try {
            id = new Identification("Sauvegarde.save");
        } catch (FileNotFoundException ex) {
            id = new Identification();
        }
        //Nouvelle methode pour quitter permettant de sauvegarder avant de quitter.
        WindowListener exitListener = new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                id.sauvegarde("Sauvegarde.save");
                System.exit(0);
            }
        };

        this.addWindowListener(exitListener);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Boite De Jeux");
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(640, 360));
        setPreferredSize(new java.awt.Dimension(854, 480));
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Creation et affichage de la fenetre de connexion.
     */
    private void interfaceConnexion() {
        this.getContentPane().removeAll();
        ConnexionPanel connexion = new ConnexionPanel();
        //le bouton inscription renvoid vers l'interface inscription.
        connexion.getInscriptionButton().addActionListener((java.awt.event.ActionEvent evt) -> {
            interfaceInscription(false);
        });
        connexion.getConnexionButton().addActionListener((java.awt.event.ActionEvent evt) -> {

        });
        connexion.getInviteButton().addActionListener((java.awt.event.ActionEvent evt) -> {
            String pseudo = connexion.getPseudoField();
            if (Utilisateur.estPseudoValide(pseudo)) {
                this.interfaceChoixJeu(new Utilisateur(pseudo));
            } else {
                interfaceChoixJeu(new Utilisateur("Invite"));
            }
        }
        );

        this.getContentPane().add(connexion);

        this.pack();
    }

    /**
     * Initialisation de la fenetre d'inscription.
     *
     * @param admin true si on vient de l'interfaceAdmin.
     */
    private void interfaceInscription(boolean admin) {
        this.getContentPane().removeAll();
        InscriptionPanel inscription = new InscriptionPanel();
        inscription.getRetourButton().addActionListener((java.awt.event.ActionEvent evt) -> {
            interfaceConnexion();
        });

        inscription.getInscriptionButton().addActionListener((java.awt.event.ActionEvent evt) -> {
            String pseudo = inscription.getPseudoField();
            String mdp = inscription.getPasswordField();
            if (!Membre.estPseudoValide(pseudo) || pseudo == null) {
                JOptionPane.showMessageDialog(null, "Votre pseudo est invalide");

            } else if (!Membre.estMdpValide(mdp) || mdp == null) {
                JOptionPane.showMessageDialog(null, "Votre mot de passe est invalide");

            } else if (id.addMembre(pseudo, mdp, admin)) {
                interfaceConnexion();

            } else {
                JOptionPane.showMessageDialog(null, "Ce pseudo est déjà utilisé");
            }
        });

        this.getContentPane().add(inscription);
        this.pack();
    }

    private void interfaceChoixJeu(Utilisateur u) {
        this.getContentPane().removeAll();
        this.getContentPane().add(new ChoixJeuPanel());
        this.pack();
    }

    /*
    Initialisation de la fenetre de jeu.
     */
    private void interfaceJeu(String jeu) {
        this.getContentPane().removeAll();
        this.getContentPane().add(new JeuPanel(jeu));
        this.pack();
    }

    /**
     * Cree et affiche l'interface Amin.
     *
     * @param m Membre administrateur qui c'est connecte.
     */
    private void interfaceAdmin(Membre m) {
        this.getContentPane().removeAll();
        AdminPanel admin = new AdminPanel();
        admin.getRetourButton().addActionListener((java.awt.event.ActionEvent evt) -> {
            interfaceConnexion();
        });
        admin.getAddAdminButton().addActionListener((java.awt.event.ActionEvent evt) -> {
            interfaceInscription(true);
        });
        admin.getChMdpButton().addActionListener((java.awt.event.ActionEvent evt) -> {
            interfaceChMdp(true, m);
        });

        this.getContentPane().add(admin);

        this.pack();
    }

    /**
     * Interface permettant a un Membre de changer de mot de passe.
     *
     * @param admin true si le Membre viens de l'interfaceAdmin.
     * @param m Membre duquel on veut changer le mot de passe.
     */
    private void interfaceChMdp(boolean admin, Membre m) {
        this.getContentPane().removeAll();
        ChangerMdpPannel chMdp = new ChangerMdpPannel();
        if (admin) {
            chMdp.getRetourButton().addActionListener((java.awt.event.ActionEvent evt) -> {
                interfaceAdmin(m);
            });
        } else {
            chMdp.getRetourButton().addActionListener((java.awt.event.ActionEvent evt) -> {
                interfaceAdmin(m);
            });
        }

        chMdp.getValiderButton().addActionListener((java.awt.event.ActionEvent evt) -> {
            String newPwd = chMdp.getNewPassword();
            if (chMdp.isConfirmation() && m.connexion(chMdp.getOldPassword()) && Membre.estMdpValide(newPwd)) {
                m.setMotDePasse(newPwd);
                interfaceAdmin(m);

            } else {
                JOptionPane.showMessageDialog(null, "Les nouveaux mots de passe ne sont pas valides");
            }
        });

        this.getContentPane().add(chMdp);
        this.pack();
    }

}
